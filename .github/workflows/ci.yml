name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        python-version: ["3.11"]  # Fixed to Python 3.11 as per requirements
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Display Python version
      run: |
        python --version
        pip --version
    
    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Verify critical imports
      run: |
        python -c "import pydantic; print(f'Pydantic version: {pydantic.__version__}')"
        python -c "import langchain; print(f'LangChain version: {langchain.__version__}')"
        python -c "import torch; print(f'PyTorch version: {torch.__version__}')"
        python -c "import gradio; print(f'Gradio version: {gradio.__version__}')"
    
    - name: Check for Pydantic v1 usage
      run: |
        echo "Checking for legacy Pydantic v1 imports..."
        ! grep -r "pydantic\.v1" --include="*.py" . || echo "No Pydantic v1 imports found"
        ! grep -r "langchain\.pydantic_v1" --include="*.py" . || echo "No LangChain Pydantic v1 imports found"
    
    - name: Run tests
      run: |
        # Run any existing tests
        if [ -f "test_dependencies.py" ]; then
          python test_dependencies.py
        fi
        
        # Run pytest if tests exist
        if [ -d "tests" ]; then
          pip install pytest
          pytest tests/ -v
        fi
    
    - name: Generate lockfile
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip freeze > requirements.lock
        echo "Generated lockfile with $(wc -l < requirements.lock) packages"
    
    - name: Upload lockfile
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: requirements-lock
        path: requirements.lock

  security-check:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install safety
      run: pip install safety
    
    - name: Security check
      run: |
        pip install -r requirements.txt
        safety check || echo "::warning::Security vulnerabilities detected"

  build-docker:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        # Create Dockerfile if it doesn't exist
        if [ ! -f "Dockerfile" ]; then
          cat > Dockerfile << 'EOF'
        FROM python:3.11-slim
        
        WORKDIR /app
        
        # Install system dependencies
        RUN apt-get update && apt-get install -y \
            gcc \
            g++ \
            && rm -rf /var/lib/apt/lists/*
        
        # Copy requirements and install Python dependencies
        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt
        
        # Copy application code
        COPY . .
        
        # Expose port for Gradio
        EXPOSE 7860
        
        # Run the application
        CMD ["python", "app.py"]
        EOF
        fi
        
        docker build -t ai-agent:latest .
        echo "Docker image built successfully" 